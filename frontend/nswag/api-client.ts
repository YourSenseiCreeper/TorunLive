//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Service {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param sipStopId (optional) 
     * @return Success
     */
    getTimetable(sipStopId: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/Timetable/GetTimetable?";
        if (sipStopId === null)
            throw new Error("The parameter 'sipStopId' cannot be null.");
        else if (sipStopId !== undefined)
            url_ += "sipStopId=" + encodeURIComponent("" + sipStopId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTimetable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTimetable(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGetTimetable(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    /**
     * @param lineNumber (optional) 
     * @param sipStopId (optional) 
     * @param directionId (optional) 
     * @return Success
     */
    getDelay(lineNumber: string | undefined, sipStopId: string | undefined, directionId: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/Timetable/GetDelay?";
        if (lineNumber === null)
            throw new Error("The parameter 'lineNumber' cannot be null.");
        else if (lineNumber !== undefined)
            url_ += "lineNumber=" + encodeURIComponent("" + lineNumber) + "&";
        if (sipStopId === null)
            throw new Error("The parameter 'sipStopId' cannot be null.");
        else if (sipStopId !== undefined)
            url_ += "sipStopId=" + encodeURIComponent("" + sipStopId) + "&";
        if (directionId === null)
            throw new Error("The parameter 'directionId' cannot be null.");
        else if (directionId !== undefined)
            url_ += "directionId=" + encodeURIComponent("" + directionId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDelay(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDelay(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGetDelay(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    /**
     * @param lineNumber (optional) 
     * @param directionId (optional) 
     * @param stopId (optional) 
     * @return Success
     */
    getNextArrivals(lineNumber: string | undefined, directionId: number | undefined, stopId: string | undefined): Observable<Date[]> {
        let url_ = this.baseUrl + "/Timetable/GetNextArrivals?";
        if (lineNumber === null)
            throw new Error("The parameter 'lineNumber' cannot be null.");
        else if (lineNumber !== undefined)
            url_ += "lineNumber=" + encodeURIComponent("" + lineNumber) + "&";
        if (directionId === null)
            throw new Error("The parameter 'directionId' cannot be null.");
        else if (directionId !== undefined)
            url_ += "directionId=" + encodeURIComponent("" + directionId) + "&";
        if (stopId === null)
            throw new Error("The parameter 'stopId' cannot be null.");
        else if (stopId !== undefined)
            url_ += "stopId=" + encodeURIComponent("" + stopId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetNextArrivals(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNextArrivals(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Date[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Date[]>;
        }));
    }

    protected processGetNextArrivals(response: HttpResponseBase): Observable<Date[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(new Date(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Date[]>(null as any);
    }

    /**
     * @return Success
     */
    getLines(): Observable<Line[]> {
        let url_ = this.baseUrl + "/Timetable/GetLines";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLines(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLines(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Line[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Line[]>;
        }));
    }

    protected processGetLines(response: HttpResponseBase): Observable<Line[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Line.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Line[]>(null as any);
    }

    /**
     * @param lineNumber (optional) 
     * @param directionId (optional) 
     * @return Success
     */
    getLineStops(lineNumber: string | undefined, directionId: number | undefined): Observable<LineStop[]> {
        let url_ = this.baseUrl + "/Timetable/GetLineStops?";
        if (lineNumber === null)
            throw new Error("The parameter 'lineNumber' cannot be null.");
        else if (lineNumber !== undefined)
            url_ += "lineNumber=" + encodeURIComponent("" + lineNumber) + "&";
        if (directionId === null)
            throw new Error("The parameter 'directionId' cannot be null.");
        else if (directionId !== undefined)
            url_ += "directionId=" + encodeURIComponent("" + directionId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLineStops(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLineStops(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LineStop[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LineStop[]>;
        }));
    }

    protected processGetLineStops(response: HttpResponseBase): Observable<LineStop[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LineStop.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LineStop[]>(null as any);
    }
}

export class Direction implements IDirection {
    lineId?: string | undefined;
    directionId?: number;
    name?: string | undefined;

    constructor(data?: IDirection) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lineId = _data["lineId"];
            this.directionId = _data["directionId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Direction {
        data = typeof data === 'object' ? data : {};
        let result = new Direction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lineId"] = this.lineId;
        data["directionId"] = this.directionId;
        data["name"] = this.name;
        return data;
    }
}

export interface IDirection {
    lineId?: string | undefined;
    directionId?: number;
    name?: string | undefined;
}

export class Line implements ILine {
    id?: string | undefined;
    name?: string | undefined;
    lineStops?: LineStop[] | undefined;
    directions?: Direction[] | undefined;

    constructor(data?: ILine) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["lineStops"])) {
                this.lineStops = [] as any;
                for (let item of _data["lineStops"])
                    this.lineStops!.push(LineStop.fromJS(item));
            }
            if (Array.isArray(_data["directions"])) {
                this.directions = [] as any;
                for (let item of _data["directions"])
                    this.directions!.push(Direction.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Line {
        data = typeof data === 'object' ? data : {};
        let result = new Line();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.lineStops)) {
            data["lineStops"] = [];
            for (let item of this.lineStops)
                data["lineStops"].push(item.toJSON());
        }
        if (Array.isArray(this.directions)) {
            data["directions"] = [];
            for (let item of this.directions)
                data["directions"].push(item.toJSON());
        }
        return data;
    }
}

export interface ILine {
    id?: string | undefined;
    name?: string | undefined;
    lineStops?: LineStop[] | undefined;
    directions?: Direction[] | undefined;
}

export class LineStop implements ILineStop {
    id?: number;
    directionLineId?: string | undefined;
    directionId?: number;
    lineId?: string | undefined;
    stopId?: string | undefined;
    stopOrder?: number;
    isOnDemand?: boolean;
    timetableVersionHash?: string | undefined;
    line?: Line;
    stop?: Stop;
    direction?: Direction;
    lineStopTimes?: LineStopTime[] | undefined;

    constructor(data?: ILineStop) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.directionLineId = _data["directionLineId"];
            this.directionId = _data["directionId"];
            this.lineId = _data["lineId"];
            this.stopId = _data["stopId"];
            this.stopOrder = _data["stopOrder"];
            this.isOnDemand = _data["isOnDemand"];
            this.timetableVersionHash = _data["timetableVersionHash"];
            this.line = _data["line"] ? Line.fromJS(_data["line"]) : <any>undefined;
            this.stop = _data["stop"] ? Stop.fromJS(_data["stop"]) : <any>undefined;
            this.direction = _data["direction"] ? Direction.fromJS(_data["direction"]) : <any>undefined;
            if (Array.isArray(_data["lineStopTimes"])) {
                this.lineStopTimes = [] as any;
                for (let item of _data["lineStopTimes"])
                    this.lineStopTimes!.push(LineStopTime.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LineStop {
        data = typeof data === 'object' ? data : {};
        let result = new LineStop();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["directionLineId"] = this.directionLineId;
        data["directionId"] = this.directionId;
        data["lineId"] = this.lineId;
        data["stopId"] = this.stopId;
        data["stopOrder"] = this.stopOrder;
        data["isOnDemand"] = this.isOnDemand;
        data["timetableVersionHash"] = this.timetableVersionHash;
        data["line"] = this.line ? this.line.toJSON() : <any>undefined;
        data["stop"] = this.stop ? this.stop.toJSON() : <any>undefined;
        data["direction"] = this.direction ? this.direction.toJSON() : <any>undefined;
        if (Array.isArray(this.lineStopTimes)) {
            data["lineStopTimes"] = [];
            for (let item of this.lineStopTimes)
                data["lineStopTimes"].push(item.toJSON());
        }
        return data;
    }
}

export interface ILineStop {
    id?: number;
    directionLineId?: string | undefined;
    directionId?: number;
    lineId?: string | undefined;
    stopId?: string | undefined;
    stopOrder?: number;
    isOnDemand?: boolean;
    timetableVersionHash?: string | undefined;
    line?: Line;
    stop?: Stop;
    direction?: Direction;
    lineStopTimes?: LineStopTime[] | undefined;
}

export class LineStopTime implements ILineStopTime {
    id?: number;
    lineStopId?: number;
    dayMinute?: number;
    isWeekday?: boolean;
    isWinterHoliday?: boolean;
    isSaturdaySundays?: boolean;
    isHolidays?: boolean;
    lineStop?: LineStop;

    constructor(data?: ILineStopTime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.lineStopId = _data["lineStopId"];
            this.dayMinute = _data["dayMinute"];
            this.isWeekday = _data["isWeekday"];
            this.isWinterHoliday = _data["isWinterHoliday"];
            this.isSaturdaySundays = _data["isSaturdaySundays"];
            this.isHolidays = _data["isHolidays"];
            this.lineStop = _data["lineStop"] ? LineStop.fromJS(_data["lineStop"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LineStopTime {
        data = typeof data === 'object' ? data : {};
        let result = new LineStopTime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["lineStopId"] = this.lineStopId;
        data["dayMinute"] = this.dayMinute;
        data["isWeekday"] = this.isWeekday;
        data["isWinterHoliday"] = this.isWinterHoliday;
        data["isSaturdaySundays"] = this.isSaturdaySundays;
        data["isHolidays"] = this.isHolidays;
        data["lineStop"] = this.lineStop ? this.lineStop.toJSON() : <any>undefined;
        return data;
    }
}

export interface ILineStopTime {
    id?: number;
    lineStopId?: number;
    dayMinute?: number;
    isWeekday?: boolean;
    isWinterHoliday?: boolean;
    isSaturdaySundays?: boolean;
    isHolidays?: boolean;
    lineStop?: LineStop;
}

export class Stop implements IStop {
    id?: string | undefined;
    name?: string | undefined;
    lineStops?: LineStop[] | undefined;

    constructor(data?: IStop) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["lineStops"])) {
                this.lineStops = [] as any;
                for (let item of _data["lineStops"])
                    this.lineStops!.push(LineStop.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Stop {
        data = typeof data === 'object' ? data : {};
        let result = new Stop();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.lineStops)) {
            data["lineStops"] = [];
            for (let item of this.lineStops)
                data["lineStops"].push(item.toJSON());
        }
        return data;
    }
}

export interface IStop {
    id?: string | undefined;
    name?: string | undefined;
    lineStops?: LineStop[] | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}